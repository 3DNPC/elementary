=== modified file 'CMakeLists.txt'
--- CMakeLists.txt	2013-09-04 15:17:59 +0000
+++ CMakeLists.txt	2013-09-05 10:19:45 +0000
@@ -68,6 +68,7 @@
 
 include(ValaPrecompile)
 vala_precompile(VALA_C
+	src/BackgroundCache.vala
     src/DBus.vala
     src/DragDropAction.vala
     src/Main.vala
@@ -77,6 +78,7 @@
     src/Utils.vala
     src/Zooming.vala
     src/Widgets/AppIcon.vala
+	src/Widgets/BackgroundManager.vala
     src/Widgets/WindowOverview.vala
     src/Widgets/WindowSwitcher.vala
     src/Widgets/WindowThumb.vala

=== modified file 'data/texture.png'
Binary files data/texture.png	2013-02-17 00:38:16 +0000 and data/texture.png	2013-09-05 10:19:45 +0000 differ
=== added file 'src/BackgroundCache.vala'
--- src/BackgroundCache.vala	1970-01-01 00:00:00 +0000
+++ src/BackgroundCache.vala	2013-09-05 10:19:45 +0000
@@ -0,0 +1,100 @@
+
+namespace Gala
+{
+	class CachedBackground : Object
+	{
+		public Meta.Background background;
+		public bool loaded;
+		public string file;
+		public GDesktop.BackgroundStyle style;
+		public Gee.LinkedList<Background> to_be_served;
+
+		public CachedBackground (Meta.Background _background, string _file,
+			GDesktop.BackgroundStyle _style)
+		{
+			background = _background;
+			loaded = false;
+			file = _file;
+			style = _style;
+			to_be_served = new Gee.LinkedList<Background> ();
+		}
+	}
+
+	public class BackgroundCache : Object
+	{
+		Gee.LinkedList<CachedBackground> cache;
+
+		static BackgroundCache? instance = null;
+
+		BackgroundCache ()
+		{
+			cache = new Gee.LinkedList<CachedBackground> ();
+		}
+
+		public static BackgroundCache get_default ()
+		{
+			if (instance == null)
+				instance = new BackgroundCache ();
+
+			return instance;
+		}
+
+		public void set_background (Background actor, Meta.Screen screen, string file,
+			GDesktop.BackgroundStyle style)
+		{
+			foreach (var cached in cache) {
+				if (cached.file == file
+					&& cached.style == style) {
+					if (!cached.loaded) {
+
+						cached.to_be_served.add (actor);
+					} else {
+						actor.content = cached.background.copy (actor.monitor,
+							Meta.BackgroundEffects.NONE);
+						actor.ready ();
+					}
+
+					return;
+				}
+			}
+
+			var content = new Meta.Background (screen, actor.monitor, Meta.BackgroundEffects.NONE);
+			actor.actor.content = content;
+			var cached = new CachedBackground (content, file, style);
+			cached.to_be_served.add (actor);
+			content.load_file_async.begin (file, style, null, background_loaded);
+
+			cache.add (cached);
+		}
+
+		void background_loaded (Object? obj, AsyncResult res)
+		{
+			var content = obj as Meta.Background;
+
+			try {
+				content.load_file_async.end (res);
+			} catch (Error e) { warning (e.message); }
+
+			CachedBackground? cached = null;
+			foreach (var c in cache) {
+				if (c.file == content.get_filename ()
+					&& c.style == content.get_style ()) {
+					cached = c;
+					break;
+				}
+			}
+
+			if (cached == null)
+				return;
+
+			cached.loaded = true;
+
+			foreach (var background in cached.to_be_served) {
+				if (background.actor.content == null)
+					background.actor.content = content.copy (background.monitor,
+						Meta.BackgroundEffects.NONE);
+				background.ready ();
+			}
+		}
+	}
+}

=== modified file 'src/Plugin.vala'
--- src/Plugin.vala	2013-08-29 08:09:58 +0000
+++ src/Plugin.vala	2013-09-05 10:21:03 +0000
@@ -50,8 +50,8 @@
 		Clutter.Actor? last_hotcorner;
 		
 #if HAS_MUTTER38
-		// FIXME we need a proper-sized background for every monitor
-		public BackgroundActor wallpaper { get; private set; }
+		public BackgroundManager background_manager { get; private set; }
+		public Clutter.Actor ui_group { get; private set; }
 #endif
 		
 		Window? moving; //place for the window that is being moved over
@@ -92,12 +92,42 @@
 			
 			var stage = Compositor.get_stage_for_screen (screen) as Clutter.Stage;
 			
-			string color = new Settings ("org.gnome.desktop.background").get_string ("primary-color");
+			var color = BackgroundSettings.get_default ().primary_color;
 			stage.background_color = Clutter.Color.from_string (color);
 			
 			if (Prefs.get_dynamic_workspaces ())
 				screen.override_workspace_layout (ScreenCorner.TOPLEFT, false, 1, -1);
 			
+#if HAS_MUTTER38
+			/* our layer structure, copied from gnome-shell (from bottom to top):
+			 * stage
+			 * + system background
+			 * + ui group
+			 * +-- window group
+			 * +---- background manager
+			 * +-- shell elements
+			 * +-- top window group
+		     */
+
+			var system_background = new SystemBackground (screen);
+			system_background.actor.add_constraint (new Clutter.BindConstraint (stage,
+				Clutter.BindCoordinate.ALL, 0));
+			stage.add_child (system_background);
+			stage.set_child_below_sibling (system_background, null);
+
+			ui_group = new Clutter.Actor ();
+			ui_group.reactive = true;
+			stage.add_child (ui_group);
+
+			var window_group = Compositor.get_window_group_for_screen (screen);
+			stage.remove_child (window_group);
+			ui_group.add_child (window_group);
+
+			background_manager = new BackgroundManager (screen);
+			window_group.add_child (background_manager);
+			window_group.set_child_below_sibling (background_manager, null);
+#endif
+
 			workspace_view = new WorkspaceView (this);
 			workspace_view.visible = false;
 			
@@ -106,13 +136,18 @@
 			zooming = new Zooming (this);
 			window_overview = new WindowOverview (this);
 			
+#if HAS_MUTTER38
+			ui_group.add_child (workspace_view);
+			ui_group.add_child (winswitcher);
+			ui_group.add_child (window_overview);
+
+			var top_window_group = Compositor.get_top_window_group_for_screen (screen);
+			stage.remove_child (top_window_group);
+			ui_group.add_child (top_window_group);
+#else
 			stage.add_child (workspace_view);
 			stage.add_child (winswitcher);
 			stage.add_child (window_overview);
-			
-#if HAS_MUTTER38
-			// FIXME create a background for every monitor and keep them updated and properly sized
-			wallpaper = new BackgroundActor ();
 #endif
 			
 			/*keybindings*/
@@ -179,8 +214,15 @@
 				workspace_view.show (true);
 			});
 			
+#if HAS_MUTTER38
+			//FIXME we have to investigate this. Apparently alt-tab is now bound to switch-applications
+			// instead of windows, which we should probably handle too
+			KeyBinding.set_custom_handler ("switch-applications", winswitcher.handle_switch_windows);
+			KeyBinding.set_custom_handler ("switch-applications-backward", winswitcher.handle_switch_windows);
+#else
 			KeyBinding.set_custom_handler ("switch-windows", winswitcher.handle_switch_windows);
 			KeyBinding.set_custom_handler ("switch-windows-backward", winswitcher.handle_switch_windows);
+#endif
 			
 			KeyBinding.set_custom_handler ("switch-to-workspace-up", () => {});
 			KeyBinding.set_custom_handler ("switch-to-workspace-down", () => {});
@@ -327,6 +369,10 @@
 #else
 			base.begin_modal (x_get_stage_window (Compositor.get_stage_for_screen (screen)), {}, 0, display.get_current_time ());
 #endif
+
+#if HAS_MUTTER38
+			Meta.Util.disable_unredirect_for_screen (screen);
+#endif
 		}
 		
 		public new void end_modal ()
@@ -335,7 +381,11 @@
 			if (modal_count > 0)
 				return;
 			
-			base.end_modal (get_screen ().get_display ().get_current_time ());
+			var screen = get_screen ();
+			base.end_modal (screen.get_display ().get_current_time ());
+#if HAS_MUTTER38
+			Meta.Util.enable_unredirect_for_screen (screen);
+#endif
 		}
 		
 		public void get_current_cursor_position (out int x, out int y)
@@ -766,7 +816,7 @@
 		/*workspace switcher*/
 		List<WindowActor>? win;
 		List<Clutter.Actor>? par; //class space for kill func
-		List<Clutter.Clone>? clones;
+		List<Clutter.Actor>? clones;
 		Clutter.Actor? in_group;
 		Clutter.Actor? out_group;
 		Clutter.Actor? moving_window_container;
@@ -814,6 +864,8 @@
 			var group = Compositor.get_window_group_for_screen (screen);
 #if !HAS_MUTTER38
 			var wallpaper = Compositor.get_background_actor_for_screen (screen);
+#else
+			var wallpaper = background_manager;
 #endif
 			
 			in_group  = new Clutter.Actor ();
@@ -822,7 +874,11 @@
 			par = new List<Clutter.Actor> ();
 			clones = new List<Clutter.Clone> ();
 			
+#if HAS_MUTTER38
+			var wallpaper_clone = new BackgroundManager (screen);
+#else
 			var wallpaper_clone = new Clutter.Clone (wallpaper);
+#endif
 			wallpaper_clone.x = (x2 < 0 ? w : -w);
 			
 			clones.append (wallpaper_clone);
@@ -965,6 +1021,8 @@
 			
 #if !HAS_MUTTER38
 			var wallpaper = Compositor.get_background_actor_for_screen (screen);
+#else
+			var wallpaper = background_manager;
 #endif
 			wallpaper.detach_animation ();
 			wallpaper.x = 0.0f;
@@ -983,6 +1041,15 @@
 		{
 			return x_handle_event (event) != 0;
 		}
+
+#if HAS_MUTTER38
+		public override bool keybinding_filter (Meta.KeyBinding binding)
+		{
+			// for now we'll just block all keybindings if we're in modal mode, 
+			// do something useful with this later
+			return modal_count > 0;
+		}
+#endif
 		
 		public override unowned PluginInfo? plugin_info ()
 		{

=== modified file 'src/Settings.vala'
--- src/Settings.vala	2013-02-10 14:01:15 +0000
+++ src/Settings.vala	2013-09-05 10:19:45 +0000
@@ -151,4 +151,29 @@
 			return instance;
 		}
 	}
+
+	public class BackgroundSettings : Granite.Services.Settings
+	{
+		public string picture_options { get; set; }
+		public string picture_uri { get; set; }
+		public int picture_opacity { get; set; }
+		public string primary_color { get; set; }
+		public string secondary_color { get; set; }
+		public string color_shading_type { get; set; }
+
+		static BackgroundSettings? instance = null;
+
+		private BackgroundSettings ()
+		{
+			base ("org.gnome.desktop.background");
+		}
+
+		public static BackgroundSettings get_default ()
+		{
+			if (instance == null)
+				instance = new BackgroundSettings ();
+
+			return instance;
+		}
+	}
 }

=== added file 'src/Widgets/BackgroundManager.vala'
--- src/Widgets/BackgroundManager.vala	1970-01-01 00:00:00 +0000
+++ src/Widgets/BackgroundManager.vala	2013-09-05 10:19:45 +0000
@@ -0,0 +1,111 @@
+//  
+//  Copyright (C) 2013 Tom Beckmann
+// 
+//  This program is free software: you can redistribute it and/or modify
+//  it under the terms of the GNU General Public License as published by
+//  the Free Software Foundation, either version 3 of the License, or
+//  (at your option) any later version.
+// 
+//  This program is distributed in the hope that it will be useful,
+//  but WITHOUT ANY WARRANTY; without even the implied warranty of
+//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+//  GNU General Public License for more details.
+// 
+//  You should have received a copy of the GNU General Public License
+//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+// 
+
+using Meta;
+
+namespace Gala
+{
+	public class BackgroundManager : BackgroundGroup
+	{
+		public BackgroundManager (Meta.Screen screen)
+		{
+			screen.monitors_changed.connect (update);
+			update (screen);
+		}
+
+		void update (Screen screen)
+		{
+			var n_monitors = screen.get_n_monitors ();
+
+			// create backgrounds we're missing
+			for (var i = get_n_children (); i < n_monitors; i++) {
+				var background = new Wallpaper (screen, i);
+				add_child (background);
+			}
+
+			// clear backgrounds we have too much
+			while (get_n_children () > n_monitors) {
+				get_child_at_index (n_monitors).destroy ();
+			}
+
+			// now resize all we got
+			for(var i = 0; i < get_n_children (); i++) {
+				var monitor_geom = screen.get_monitor_geometry (i);
+
+				var background = get_child_at_index (i) as Background;
+				background.actor.set_position (monitor_geom.x, monitor_geom.y);
+				background.actor.set_size (monitor_geom.width, monitor_geom.height);
+			}
+		}
+	}
+
+	public abstract class Background : BackgroundGroup
+	{
+		public int monitor { get; construct set; }
+		public BackgroundActor actor { get; construct set; }
+		public abstract signal void ready ();
+
+		public Background (int monitor)
+		{
+			Object (monitor: monitor, actor: new BackgroundActor ());
+			add_child (actor);
+		}
+	}
+
+	public class Wallpaper : Background
+	{
+		public Wallpaper (Screen screen, int monitor)
+		{
+			base (monitor);
+
+			var settings = BackgroundSettings.get_default ();
+			BackgroundCache.get_default ().set_background (this, screen,
+				File.new_for_uri (settings.picture_uri).get_path (),
+				translate_style (settings.picture_options));
+		}
+
+		GDesktop.BackgroundStyle translate_style (string style)
+		{
+			switch (style) {
+				case "zoom":
+					return GDesktop.BackgroundStyle.ZOOM;
+				case "wallpaper":
+					return GDesktop.BackgroundStyle.WALLPAPER;
+				case "centered":
+					return GDesktop.BackgroundStyle.CENTERED;
+				case "scaled":
+					return GDesktop.BackgroundStyle.SCALED;
+				case "stretched":
+					return GDesktop.BackgroundStyle.STRETCHED;
+				case "spanned":
+					return GDesktop.BackgroundStyle.SPANNED;
+			}
+			return GDesktop.BackgroundStyle.NONE;
+		}
+	}
+
+	public class SystemBackground : Background
+	{
+		public SystemBackground (Screen screen)
+		{
+			base (0);
+
+			BackgroundCache.get_default ().set_background (this, screen,
+				Config.PKGDATADIR + "/texture.png", GDesktop.BackgroundStyle.WALLPAPER);
+		}
+	}
+}

=== modified file 'src/Widgets/WindowOverview.vala'
--- src/Widgets/WindowOverview.vala	2013-08-27 06:22:58 +0000
+++ src/Widgets/WindowOverview.vala	2013-09-05 10:19:45 +0000
@@ -578,12 +578,10 @@
 
 			screen.window_left_monitor.connect (window_left_monitor);
 			
-#if HAS_MUTTER38
-			plugin.wallpaper.
-#else
+#if !HAS_MUTTER38
 			Compositor.get_background_actor_for_screen (screen).
-#endif
 				animate (AnimationMode.EASE_OUT_QUAD, 350, dim_factor : 0.6);
+#endif
 			
 			// sort windows by stacking order
 			var windows = screen.get_display ().sort_windows_by_stacking (used_windows);
@@ -723,12 +721,10 @@
 				exposed.selected.disconnect (thumb_selected);
 			}
 			
-#if HAS_MUTTER38
-			plugin.wallpaper.
-#else
+#if !HAS_MUTTER38
 			Compositor.get_background_actor_for_screen (screen).
-#endif
 				animate (AnimationMode.EASE_OUT_QUAD, 300, dim_factor : 1.0);
+#endif
 			
 			if (animate) {
 				Timeout.add (300, () => {

=== modified file 'src/Widgets/WindowSwitcher.vala'
--- src/Widgets/WindowSwitcher.vala	2013-08-18 21:09:23 +0000
+++ src/Widgets/WindowSwitcher.vala	2013-09-05 10:19:45 +0000
@@ -220,6 +220,9 @@
 			var prev_win = current_window;
 			if (action == Meta.KeyBindingAction.SWITCH_GROUP ||
 				action == Meta.KeyBindingAction.SWITCH_WINDOWS || 
+#if HAS_MUTTER38
+				action == Meta.KeyBindingAction.SWITCH_APPLICATIONS ||
+#endif
 				event.get_key_symbol () == Clutter.Key.Right) {
 				
 				current_window = display.get_tab_next (Meta.TabList.NORMAL, screen, 
@@ -228,6 +231,9 @@
 				
 			} else if (action == Meta.KeyBindingAction.SWITCH_GROUP_BACKWARD ||
 				action == Meta.KeyBindingAction.SWITCH_WINDOWS_BACKWARD ||
+#if HAS_MUTTER38
+				action == Meta.KeyBindingAction.SWITCH_APPLICATIONS_BACKWARD ||
+#endif
 				event.get_key_symbol () == Clutter.Key.Left) {
 				
 				current_window = display.get_tab_next (Meta.TabList.NORMAL, screen, 

=== modified file 'src/Widgets/WorkspaceThumb.vala'
--- src/Widgets/WorkspaceThumb.vala	2013-08-09 12:52:20 +0000
+++ src/Widgets/WorkspaceThumb.vala	2013-09-05 10:19:45 +0000
@@ -60,7 +60,11 @@
 		
 		uint hover_timer = 0;
 		
+#if HAS_MUTTER38
+		public WorkspaceThumb (Workspace _workspace, BackgroundManager _wallpaper)
+#else
 		public WorkspaceThumb (Workspace _workspace)
+#endif
 		{
 			workspace = _workspace;
 			screen = workspace.get_screen ();
@@ -91,7 +95,7 @@
 			
 			// FIXME find a nice way to draw a border around it, maybe combinable with the indicator using a ShaderEffect
 #if HAS_MUTTER38
-			wallpaper = new Clutter.Actor ();
+			wallpaper = new BackgroundManager (screen);
 #else
 			wallpaper = new Clone (Compositor.get_background_actor_for_screen (screen));
 #endif
@@ -202,6 +206,10 @@
 			indicator.width = width + 2 * INDICATOR_BORDER;
 			(indicator.content as Canvas).set_size ((int)indicator.width, (int)indicator.height);
 
+#if HAS_MUTTER38
+			wallpaper.scale_x = width / swidth;
+			wallpaper.scale_y = THUMBNAIL_HEIGHT / sheight;
+#endif
 			wallpaper.width = width;
 			windows.width = width;
 

=== modified file 'src/Widgets/WorkspaceView.vala'
--- src/Widgets/WorkspaceView.vala	2013-06-27 12:05:30 +0000
+++ src/Widgets/WorkspaceView.vala	2013-09-05 10:19:45 +0000
@@ -29,7 +29,9 @@
 		
 		Clutter.Actor thumbnails;
 		Clutter.Actor scroll;
+#if !HAS_MUTTER38
 		Clutter.Actor click_catcher; //invisible plane that catches clicks outside the view
+#endif
 		
 		bool animating; // delay closing the popup
 		
@@ -67,13 +69,17 @@
 			scroll.content = new Clutter.Canvas ();
 			(scroll.content as Clutter.Canvas).draw.connect (draw_scroll);
 			
+#if HAS_MUTTER38
+			plugin.ui_group.button_release_event.connect (outside_clicked);
+#else
 			click_catcher = new Clutter.Actor ();
 			click_catcher.reactive = true;
 			click_catcher.button_release_event.connect ((e) => {
 				hide ();
 				return true;
 			});
-			Compositor.get_stage_for_screen (screen).add_child (click_catcher);
+			Compositor.get_stage_for_screen (screen).insert_child_below (click_catcher);
+#endif
 			
 			add_child (thumbnails);
 			add_child (scroll);
@@ -114,7 +120,7 @@
 		void init_thumbnails ()
 		{
 			foreach (var workspace in screen.get_workspaces ()) {
-				var thumb = new WorkspaceThumb (workspace);
+				var thumb = new WorkspaceThumb (workspace, plugin.background_manager);
 				thumb.clicked.connect (hide);
 				thumb.closed.connect (remove_workspace);
 				thumb.window_on_last.connect (add_workspace);
@@ -128,6 +134,14 @@
 				&& Utils.get_n_windows (screen.get_workspaces ().first ().data) > 0)
 				add_workspace ();
 		}
+
+#if HAS_MUTTER38
+		bool outside_clicked (Clutter.ButtonEvent event)
+		{
+			hide ();
+			return true;
+		}
+#endif
 		
 		bool draw_background (Cairo.Context cr)
 		{
@@ -168,7 +182,7 @@
 		
 		void create_workspace_thumb (Meta.Workspace workspace)
 		{
-			var thumb = new WorkspaceThumb (workspace);
+			var thumb = new WorkspaceThumb (workspace, plugin.background_manager);
 			thumb.clicked.connect (hide);
 			thumb.closed.connect (remove_workspace);
 			thumb.window_on_last.connect (add_workspace);
@@ -415,11 +429,13 @@
 			int swidth, sheight;
 			screen.get_size (out swidth, out sheight);
 			
+#if !HAS_MUTTER38
 			click_catcher.width = swidth;
 			click_catcher.height = sheight;
 			click_catcher.x = 0;
 			click_catcher.y = 0;
 			click_catcher.visible = true;
+#endif
 			
 			animating = true;
 			Timeout.add (50, () => {
@@ -439,6 +455,8 @@
 		{
 			if (!visible || animating)
 				return;
+
+			plugin.ui_group.button_release_event.disconnect (outside_clicked);
 			
 			float width, height;
 			plugin.get_screen ().get_size (out width, out height);
@@ -455,7 +473,9 @@
 				visible = false;
 			});
 			
+#if !HAS_MUTTER38
 			click_catcher.visible = false;
+#endif
 			
 			var wins = Compositor.get_window_group_for_screen (screen);
 			wins.detach_animation ();

