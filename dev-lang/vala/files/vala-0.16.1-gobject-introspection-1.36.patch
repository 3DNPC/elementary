#diff -Nuar vala-0.16.1.orig/vala/valagirparser.vala vala-0.16.1/vala/valagirparser.vala
#--- vala-0.16.1.orig/vala/valagirparser.vala	2013-07-22 09:22:41.769067339 +0200
#+++ vala-0.16.1/vala/valagirparser.vala	2013-07-22 09:42:31.397077383 +0200
#@@ -2907,6 +2907,11 @@
# 		cl.comment = parse_symbol_doc ();
# 
# 		while (current_token == MarkupTokenType.START_ELEMENT) {
#+			if (reader.name == "instance-parameter") {
#+				skip_element ();
#+				continue;
#+			}
#+
# 			if (!push_metadata ()) {
# 				skip_element ();
# 				continue;
diff -Nuar vala-0.16.1.orig/vala/valagirparser.c vala-0.16.1/vala/valagirparser.c
--- vala-0.16.1.orig/vala/valagirparser.c	2013-07-22 09:22:41.777067339 +0200
+++ vala-0.16.1/vala/valagirparser.c	2013-07-22 09:43:33.402077907 +0200
@@ -10294,7 +10294,7 @@
 	ValaClass* _tmp34_;
 	ValaGirComment* _tmp35_ = NULL;
 	ValaGirComment* _tmp36_;
-	const gchar* _tmp61_;
+	const gchar* _tmp64_;
 	g_return_if_fail (self != NULL);
 	g_return_if_fail (element_name != NULL);
 	_tmp0_ = element_name;
@@ -10391,78 +10391,88 @@
 	_vala_comment_unref0 (_tmp36_);
 	while (TRUE) {
 		ValaMarkupTokenType _tmp37_;
-		gboolean _tmp38_ = FALSE;
-		ValaMarkupReader* _tmp39_;
+		ValaMarkupReader* _tmp38_;
+		const gchar* _tmp39_;
 		const gchar* _tmp40_;
-		const gchar* _tmp41_;
+		gboolean _tmp41_ = FALSE;
+		ValaMarkupReader* _tmp42_;
+		const gchar* _tmp43_;
+		const gchar* _tmp44_;
 		_tmp37_ = self->priv->current_token;
 		if (!(_tmp37_ == VALA_MARKUP_TOKEN_TYPE_START_ELEMENT)) {
 			break;
 		}
-		_tmp38_ = vala_gir_parser_push_metadata (self);
-		if (!_tmp38_) {
+		_tmp38_ = self->priv->reader;
+		_tmp39_ = vala_markup_reader_get_name (_tmp38_);
+		_tmp40_ = _tmp39_;
+		if (g_strcmp0 (_tmp40_, "instance-parameter") == 0) {
 			vala_gir_parser_skip_element (self);
 			continue;
 		}
-		_tmp39_ = self->priv->reader;
-		_tmp40_ = vala_markup_reader_get_name (_tmp39_);
-		_tmp41_ = _tmp40_;
-		if (g_strcmp0 (_tmp41_, "field") == 0) {
+		_tmp41_ = vala_gir_parser_push_metadata (self);
+		if (!_tmp41_) {
+			vala_gir_parser_skip_element (self);
+			continue;
+		}
+		_tmp42_ = self->priv->reader;
+		_tmp43_ = vala_markup_reader_get_name (_tmp42_);
+		_tmp44_ = _tmp43_;
+		if (g_strcmp0 (_tmp44_, "field") == 0) {
 			vala_gir_parser_parse_field (self);
 		} else {
-			ValaMarkupReader* _tmp42_;
-			const gchar* _tmp43_;
-			const gchar* _tmp44_;
-			_tmp42_ = self->priv->reader;
-			_tmp43_ = vala_markup_reader_get_name (_tmp42_);
-			_tmp44_ = _tmp43_;
-			if (g_strcmp0 (_tmp44_, "constructor") == 0) {
+			ValaMarkupReader* _tmp45_;
+			const gchar* _tmp46_;
+			const gchar* _tmp47_;
+			_tmp45_ = self->priv->reader;
+			_tmp46_ = vala_markup_reader_get_name (_tmp45_);
+			_tmp47_ = _tmp46_;
+			if (g_strcmp0 (_tmp47_, "constructor") == 0) {
 				vala_gir_parser_parse_constructor (self);
 			} else {
-				ValaMarkupReader* _tmp45_;
-				const gchar* _tmp46_;
-				const gchar* _tmp47_;
-				_tmp45_ = self->priv->reader;
-				_tmp46_ = vala_markup_reader_get_name (_tmp45_);
-				_tmp47_ = _tmp46_;
-				if (g_strcmp0 (_tmp47_, "method") == 0) {
+				ValaMarkupReader* _tmp48_;
+				const gchar* _tmp49_;
+				const gchar* _tmp50_;
+				_tmp48_ = self->priv->reader;
+				_tmp49_ = vala_markup_reader_get_name (_tmp48_);
+				_tmp50_ = _tmp49_;
+				if (g_strcmp0 (_tmp50_, "method") == 0) {
 					vala_gir_parser_parse_method (self, "method");
 				} else {
-					ValaMarkupReader* _tmp48_;
-					const gchar* _tmp49_;
-					const gchar* _tmp50_;
-					_tmp48_ = self->priv->reader;
-					_tmp49_ = vala_markup_reader_get_name (_tmp48_);
-					_tmp50_ = _tmp49_;
-					if (g_strcmp0 (_tmp50_, "function") == 0) {
+					ValaMarkupReader* _tmp51_;
+					const gchar* _tmp52_;
+					const gchar* _tmp53_;
+					_tmp51_ = self->priv->reader;
+					_tmp52_ = vala_markup_reader_get_name (_tmp51_);
+					_tmp53_ = _tmp52_;
+					if (g_strcmp0 (_tmp53_, "function") == 0) {
 						vala_gir_parser_skip_element (self);
 					} else {
-						ValaMarkupReader* _tmp51_;
-						const gchar* _tmp52_;
-						const gchar* _tmp53_;
-						_tmp51_ = self->priv->reader;
-						_tmp52_ = vala_markup_reader_get_name (_tmp51_);
-						_tmp53_ = _tmp52_;
-						if (g_strcmp0 (_tmp53_, "union") == 0) {
+						ValaMarkupReader* _tmp54_;
+						const gchar* _tmp55_;
+						const gchar* _tmp56_;
+						_tmp54_ = self->priv->reader;
+						_tmp55_ = vala_markup_reader_get_name (_tmp54_);
+						_tmp56_ = _tmp55_;
+						if (g_strcmp0 (_tmp56_, "union") == 0) {
 							vala_gir_parser_parse_union (self);
 						} else {
-							ValaSourceReference* _tmp54_ = NULL;
-							ValaSourceReference* _tmp55_;
-							ValaMarkupReader* _tmp56_;
-							const gchar* _tmp57_;
-							const gchar* _tmp58_;
-							gchar* _tmp59_ = NULL;
-							gchar* _tmp60_;
-							_tmp54_ = vala_gir_parser_get_current_src (self);
-							_tmp55_ = _tmp54_;
-							_tmp56_ = self->priv->reader;
-							_tmp57_ = vala_markup_reader_get_name (_tmp56_);
+							ValaSourceReference* _tmp57_ = NULL;
+							ValaSourceReference* _tmp58_;
+							ValaMarkupReader* _tmp59_;
+							const gchar* _tmp60_;
+							const gchar* _tmp61_;
+							gchar* _tmp62_ = NULL;
+							gchar* _tmp63_;
+							_tmp57_ = vala_gir_parser_get_current_src (self);
 							_tmp58_ = _tmp57_;
-							_tmp59_ = g_strdup_printf ("unknown child element `%s' in `class'", _tmp58_);
-							_tmp60_ = _tmp59_;
-							vala_report_error (_tmp55_, _tmp60_);
-							_g_free0 (_tmp60_);
-							_vala_source_reference_unref0 (_tmp55_);
+							_tmp59_ = self->priv->reader;
+							_tmp60_ = vala_markup_reader_get_name (_tmp59_);
+							_tmp61_ = _tmp60_;
+							_tmp62_ = g_strdup_printf ("unknown child element `%s' in `class'", _tmp61_);
+							_tmp63_ = _tmp62_;
+							vala_report_error (_tmp58_, _tmp63_);
+							_g_free0 (_tmp63_);
+							_vala_source_reference_unref0 (_tmp58_);
 							vala_gir_parser_skip_element (self);
 						}
 					}
@@ -10472,8 +10482,8 @@
 		vala_gir_parser_pop_metadata (self);
 	}
 	vala_gir_parser_pop_node (self);
-	_tmp61_ = element_name;
-	vala_gir_parser_end_element (self, _tmp61_);
+	_tmp64_ = element_name;
+	vala_gir_parser_end_element (self, _tmp64_);
 	_vala_code_node_unref0 (cl);
 	_g_free0 (name);
 }
