Description: Use synchronous notifications when they are supported
Author: ?
Upstream: that's Ubuntu specific (notify-osd)
--- a/plugins/media-keys/gsd-media-keys-manager.c
+++ b/plugins/media-keys/gsd-media-keys-manager.c
@@ -65,6 +65,8 @@
 #include "gvc-mixer-control.h"
 #include "gvc-mixer-sink.h"
 
+#include <libnotify/notify.h>
+
 #define GSD_MEDIA_KEYS_DBUS_PATH GSD_DBUS_PATH "/MediaKeys"
 #define GSD_MEDIA_KEYS_DBUS_NAME GSD_DBUS_NAME ".MediaKeys"
 
@@ -194,6 +196,11 @@
         guint            start_idle_id;
 
         MprisController *mpris_controller;
+
+        /* Ubuntu notifications */
+        NotifyNotification *volume_notification;
+        NotifyNotification *brightness_notification;
+        NotifyNotification *kb_backlight_notification;
 };
 
 static void     gsd_media_keys_manager_class_init  (GsdMediaKeysManagerClass *klass);
@@ -212,6 +219,132 @@
 
 static gpointer manager_object = NULL;
 
+#define NOTIFY_CAP_PRIVATE_SYNCHRONOUS "x-canonical-private-synchronous"
+#define NOTIFY_CAP_PRIVATE_ICON_ONLY "x-canonical-private-icon-only"
+#define NOTIFY_HINT_TRUE "true"
+
+typedef struct {
+        GsdMediaKeysManager *manager;
+        MediaKeyType type;
+        guint old_percentage;
+
+} GsdBrightnessActionData;
+
+static const char *volume_icons[] = {
+        "notification-audio-volume-muted",
+        "notification-audio-volume-low",
+        "notification-audio-volume-medium",
+        "notification-audio-volume-high",
+        NULL
+};
+
+static const char *brightness_icons[] = {
+        "notification-display-brightness-off",
+	"notification-display-brightness-low",
+	"notification-display-brightness-medium",
+	"notification-display-brightness-high",
+	"notification-display-brightness-full",
+        NULL
+};
+
+static const char *kb_backlight_icons[] = {
+        "notification-keyboard-brightness-off",
+        "notification-keyboard-brightness-low",
+        "notification-keyboard-brightness-medium",
+        "notification-keyboard-brightness-high",
+        "notification-keyboard-brightness-full",
+        NULL
+};
+
+static const char *
+calculate_icon_name (gint value, const char **icon_names)
+{
+        value = CLAMP (value, 0, 100);
+        gint length = g_strv_length (icon_names);
+        gint s = (length - 1) * value / 100 + 1;
+        s = CLAMP (s, 1, length - 1);
+
+        return icon_names[s];
+}
+
+static gboolean
+ubuntu_osd_notification_is_supported (void)
+{
+        GList *caps;
+        gboolean has_cap;
+
+        caps = notify_get_server_caps ();
+        has_cap = (g_list_find_custom (caps, NOTIFY_CAP_PRIVATE_SYNCHRONOUS, (GCompareFunc) g_strcmp0) != NULL);
+        g_list_foreach (caps, (GFunc) g_free, NULL);
+        g_list_free (caps);
+
+        return has_cap;
+}
+
+static gboolean
+ubuntu_osd_notification_show_icon (const char *icon,
+                                   const char *hint)
+{
+        if (!ubuntu_osd_notification_is_supported ())
+                return FALSE;
+
+        NotifyNotification *notification = notify_notification_new (" ", "", icon);
+        notify_notification_set_hint_string (notification, NOTIFY_CAP_PRIVATE_SYNCHRONOUS, hint);
+        notify_notification_set_hint_string (notification, NOTIFY_CAP_PRIVATE_ICON_ONLY, NOTIFY_HINT_TRUE);
+
+        gboolean res = notify_notification_show (notification, NULL);
+        g_object_unref (notification);
+
+        return res;
+}
+
+static gboolean
+ubuntu_osd_do_notification (NotifyNotification **notification,
+                            const char *hint,
+                            gint value,
+                            gboolean muted,
+                            const char **icon_names)
+{
+        if (!ubuntu_osd_notification_is_supported ())
+                return FALSE;
+
+        if (!*notification) {
+                *notification = notify_notification_new (" ", "", NULL);
+                notify_notification_set_hint_string (*notification, NOTIFY_CAP_PRIVATE_SYNCHRONOUS, hint);
+        }
+
+        value = CLAMP (value, -1, 101);
+        const char *icon = muted ? icon_names[0] : calculate_icon_name (value, icon_names);
+        notify_notification_set_hint_int32 (*notification, "value", value);
+        notify_notification_update (*notification, " ", "", icon);
+
+        return notify_notification_show (*notification, NULL);
+}
+
+static gboolean
+ubuntu_osd_notification_show_volume (GsdMediaKeysManager *manager,
+                                     gint value,
+                                     gboolean muted)
+{
+        return ubuntu_osd_do_notification (&manager->priv->volume_notification,
+                                           "volume", value, muted, volume_icons);
+}
+
+static gboolean
+ubuntu_osd_notification_show_brightness (GsdMediaKeysManager *manager,
+                                         gint value)
+{
+        return ubuntu_osd_do_notification (&manager->priv->brightness_notification,
+                                           "brightness", value, value <= 0, brightness_icons);
+}
+
+static gboolean
+ubuntu_osd_notification_show_kb_backlight (GsdMediaKeysManager *manager,
+                                           gint value)
+{
+        return ubuntu_osd_do_notification (&manager->priv->kb_backlight_notification,
+                                           "keyboard", value, value <= 0, kb_backlight_icons);
+}
 
 static void
 media_key_free (MediaKey *key)
@@ -901,7 +1034,9 @@
         }
 
         /* Show OSD */
-        show_osd (manager, "media-eject-symbolic", NULL, -1);
+        if (!ubuntu_osd_notification_show_icon ("notification-device-eject", "Eject")) {
+                show_osd (manager, "media-eject-symbolic", NULL, -1);
+        }
 
         /* Clean up the drive selection and exit if no suitable
          * drives are found */
@@ -975,8 +1110,10 @@
 static void
 do_touchpad_osd_action (GsdMediaKeysManager *manager, gboolean state)
 {
-        show_osd (manager, state ? "input-touchpad-symbolic"
-                                 : "touchpad-disabled-symbolic", NULL, -1);
+        if (!ubuntu_osd_notification_show_icon ((!state) ? "touchpad-disabled-symbolic" : "input-touchpad-symbolic", "Touchpad")) {
+                show_osd (manager, state ? "input-touchpad-symbolic"
+                                           : "touchpad-disabled-symbolic", NULL, -1);
+        }
 }
 
 static void
@@ -1042,12 +1179,10 @@
         const GvcMixerStreamPort *port;
         const char *icon;
 
-        if (!muted) {
-                vol = (int) (100 * (double) vol / PA_VOLUME_NORM);
-                vol = CLAMP (vol, 0, 100);
-        } else {
-                vol = 0.0;
-        }
+        if (ubuntu_osd_notification_show_volume (manager, vol, muted))
+                goto done;
+
+        vol = CLAMP (vol, 0, 100);
 
         icon = get_icon_name_for_volume (!GVC_IS_MIXER_SINK (stream), muted, vol);
         port = gvc_mixer_stream_get_port (stream);
@@ -1062,6 +1197,7 @@
                 show_osd (manager, icon, NULL, vol);
         }
 
+done:
         if (quiet == FALSE && sound_changed != FALSE && muted == FALSE) {
                 ca_context_change_device (manager->priv->ca,
                                           gvc_mixer_stream_get_name (stream));
@@ -1191,7 +1327,7 @@
 {
 	GvcMixerStream *stream;
         gboolean old_muted, new_muted;
-        guint old_vol, new_vol, norm_vol_step;
+        guint old_vol, new_vol, norm_vol_step, osd_vol;
         gboolean sound_changed;
 
         /* Find the stream that corresponds to the device, if any */
@@ -1249,7 +1385,16 @@
                 }
         }
 
-        update_dialog (manager, stream, new_vol, new_muted, sound_changed, quiet);
+        if (type == VOLUME_DOWN_KEY && old_vol == 0 && old_muted)
+                osd_vol = -1;
+        else if (type == VOLUME_UP_KEY && old_vol == PA_VOLUME_NORM && !old_muted)
+                osd_vol = 101;
+        else if (!new_muted)
+                osd_vol = (int) (100 * (double) new_vol / PA_VOLUME_NORM);
+        else
+                osd_vol = 0;
+
+        update_dialog (manager, stream, osd_vol, new_muted, sound_changed, quiet);
 }
 
 static void
@@ -1579,8 +1724,11 @@
 
 static gboolean
 do_multimedia_player_action (GsdMediaKeysManager *manager,
+                             const char          *icon,
                              const char          *key)
 {
+        if (icon != NULL)
+                ubuntu_osd_notification_show_icon (icon, key);
         return gsd_media_player_key_pressed (manager, key);
 }
 
@@ -1862,7 +2010,16 @@
 
         /* update the dialog with the new value */
         g_variant_get (new_percentage, "(i)", &percentage);
+        if (new_percentage >= 0 && debug =="screen")
+                if (ubuntu_osd_notification_show_brightness (manager, CLAMP (new_percentage, 0, 100)))
+                        goto out;
+        else
+                if (ubuntu_osd_notification_show_kb_backlight (manager, CLAMP (new_percentage, 0, 100)))
+                        goto out;
+
         show_osd (manager, icon, NULL, percentage);
+
+out:
         g_variant_unref (new_percentage);
 }
 
@@ -2093,23 +2250,23 @@
                 do_execute_desktop_or_desktop (manager, "gcalctool.desktop", "gnome-calculator.desktop", timestamp);
                 break;
         case PLAY_KEY:
-                return do_multimedia_player_action (manager, "Play");
+                return do_multimedia_player_action (manager, NULL, "Play");
         case PAUSE_KEY:
-                return do_multimedia_player_action (manager, "Pause");
+                return do_multimedia_player_action (manager, NULL, "Pause");
         case STOP_KEY:
-                return do_multimedia_player_action (manager, "Stop");
+                return do_multimedia_player_action (manager, NULL, "Stop");
         case PREVIOUS_KEY:
-                return do_multimedia_player_action (manager, "Previous");
+                return do_multimedia_player_action (manager, NULL, "Previous");
         case NEXT_KEY:
-                return do_multimedia_player_action (manager, "Next");
+                return do_multimedia_player_action (manager, NULL, "Next");
         case REWIND_KEY:
-                return do_multimedia_player_action (manager, "Rewind");
+                return do_multimedia_player_action (manager, NULL, "Rewind");
         case FORWARD_KEY:
-                return do_multimedia_player_action (manager, "FastForward");
+                return do_multimedia_player_action (manager, NULL, "FastForward");
         case REPEAT_KEY:
-                return do_multimedia_player_action (manager, "Repeat");
+                return do_multimedia_player_action (manager, NULL, "Repeat");
         case RANDOM_KEY:
-                return do_multimedia_player_action (manager, "Shuffle");
+                return do_multimedia_player_action (manager, NULL, "Shuffle");
         case VIDEO_OUT_KEY:
                 do_video_out_action (manager, timestamp);
                 break;
@@ -2457,6 +2614,24 @@
         g_clear_pointer (&priv->introspection_data, g_dbus_node_info_unref);
         g_clear_object (&priv->connection);
 
+        if (priv->volume_notification != NULL) {
+                notify_notification_close (priv->volume_notification, NULL);
+                g_object_unref (priv->volume_notification);
+                priv->volume_notification = NULL;
+        }
+
+        if (priv->brightness_notification != NULL) {
+                notify_notification_close (priv->brightness_notification, NULL);
+                g_object_unref (priv->brightness_notification);
+                priv->brightness_notification = NULL;
+        }
+
+        if (priv->kb_backlight_notification != NULL) {
+                notify_notification_close (priv->kb_backlight_notification, NULL);
+                g_object_unref (priv->kb_backlight_notification);
+                priv->kb_backlight_notification = NULL;
+        }
+
         if (priv->keys != NULL) {
                 for (i = 0; i < priv->keys->len; ++i) {
                         MediaKey *key;
--- a/configure.ac
+++ b/configure.ac
@@ -205,7 +205,7 @@
 dnl - media-keys plugin stuff
 dnl ---------------------------------------------------------------------------
 
-PKG_CHECK_MODULES(MEDIA_KEYS, [gio-unix-2.0 libpulse >= $PA_REQUIRED_VERSION $GUDEV_PKG libpulse-mainloop-glib >= $PA_REQUIRED_VERSION libcanberra-gtk3 upower-glib >= $UPOWER_REQUIRED_VERSION])
+PKG_CHECK_MODULES(MEDIA_KEYS, [gio-unix-2.0 libpulse >= $PA_REQUIRED_VERSION $GUDEV_PKG libpulse-mainloop-glib >= $PA_REQUIRED_VERSION libcanberra-gtk3 libnotify upower-glib >= $UPOWER_REQUIRED_VERSION])
 PKG_CHECK_MODULES(GVC, [gobject-2.0 libpulse >= $PA_REQUIRED_VERSION libpulse-mainloop-glib >= $PA_REQUIRED_VERSION])
 AM_CONDITIONAL(HAVE_INTROSPECTION, false)
 
